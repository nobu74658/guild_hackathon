{
    "manager": {
        "prefix": "am",
        "body": [
            "import 'package:riverpod_annotation/riverpod_annotation.dart';",
            "",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "abstract class $2Interface {",
            "Future<List<$4 fetch();",
            "}",
            "",
            "@riverpod",
            "${2:${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}}Interface ${1:${TM_FILENAME_BASE/(_)([a-zA-Z])/${2:/capitalize}/g}}(",
            "  $2Ref ref) =",
            "   _$2(repository: ref.watch($3RepositoryProvider));",
            "",
            "class _${2:${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}} extends $2Interface {",
            " _${2:${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}}({",
            "   required this.repository",
            "  });",
            "",
            "   final ${4:${3/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}}RepositoryInterface repository;",
            "",
            "   @override",
            "   Future<List<$4 fetch() = repository.fetch();",
            "}",
            "",
        ],
        "description": "app/hoge_manager.dartで使用",
    },
    "state": {
        "prefix": "as",
        "body": [
            "import 'dart:async';",
            "",
            "import 'package:riverpod_annotation/riverpod_annotation.dart';",
            "",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@riverpod",
            "class ${1:${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}} extends _$$1 {",
            "  @override",
            "  Future<List<${3:${2/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}} build() async {",
            "   final manager = ref.watch($2ManagerProvider);",
            "   return manager.fetch();",
            "  }",
            "}",
            "",
        ],
        "description": "app/hoge_state.dartで使用",
    },
    "repository interface": {
        "prefix": "ri",
        "body": [
            "abstract class ${1:${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}} {",
            "   $1();",
            "",
            "   Future<List<${3:${2/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}} fetch();",
            "}",
            ""		
        ],
        "description": "infrastructure/hoge_repository_interface.dartで使用",
    },
    "repository": {
        "prefix": "rr",
        "body": [
            "import 'package:riverpod_annotation/riverpod_annotation.dart';",
            "",
            "part '$TM_FILENAME_BASE.g.dart';",
            "",
            "@Riverpod(keepAlive: true)",
            "${2:${1/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}}RepositoryInterface $1Repository($2RepositoryRef ref) =",
            "   _${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}();",
            "",
            "class _${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g} extends $2RepositoryInterface {",
            "  _${TM_FILENAME_BASE/(?:^|-|_|\\.)(\\w)/${1:/upcase}/g}();",
            "",
            "  @override",
            "  Future<List<$2 fetch() {}",
            "}",
            "",
        ],
        "description": "infrastructure/hoge_repository.dartで使用",
    },
    "state_when": {
        "prefix": "when",
        "body": [
            "final state = ref.watch($1);",
            "return state.when(",
            "error: (err, stack) = const Center(child: Text('Error: $err')),",
            "loading: () = const Center(child: CircularProgressIndicator()),",
            "data: (data) {",
            "   $0",
            "},);",
        ]
    },
}